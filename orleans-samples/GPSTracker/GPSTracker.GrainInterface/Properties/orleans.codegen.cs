//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#if !EXCLUDE_CODEGEN
#pragma warning disable 162
#pragma warning disable 219
#pragma warning disable 693
#pragma warning disable 1591
#pragma warning disable 1998

namespace GPSTracker.GrainInterface
{
    using System;
    using System.Net;
    using System.Runtime.Serialization;
    using System.Runtime.Serialization.Formatters.Binary;
    using System.IO;
    using System.Collections.Generic;
    using Orleans;
    using GPSTracker.Common;
    using System.Collections;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PushNotifierGrainFactory
    {
        

                        public static IPushNotifierGrain GetGrain(long primaryKey)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IPushNotifierGrain), -2137827649, primaryKey));
                        }

                        public static IPushNotifierGrain GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IPushNotifierGrain), -2137827649, primaryKey, grainClassNamePrefix));
                        }

                        public static IPushNotifierGrain GetGrain(Guid primaryKey)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IPushNotifierGrain), -2137827649, primaryKey));
                        }

                        public static IPushNotifierGrain GetGrain(Guid primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IPushNotifierGrain), -2137827649, primaryKey, grainClassNamePrefix));
                        }

            public static IPushNotifierGrain Cast(IAddressable grainRef)
            {
                
                return PushNotifierGrainReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [Orleans.GrainReferenceAttribute("GPSTracker.GrainInterface.IPushNotifierGrain")]
        internal class PushNotifierGrainReference : Orleans.GrainReference, IPushNotifierGrain, Orleans.IAddressable
        {
            

            public static IPushNotifierGrain Cast(IAddressable grainRef)
            {
                
                return (IPushNotifierGrain) GrainReference.CastInternal(typeof(IPushNotifierGrain), (GrainReference gr) => { return new PushNotifierGrainReference(gr);}, grainRef, -2137827649);
            }

                protected override int InterfaceId { get { return -2137827649; } }

                public override bool IsCompatible(int interfaceId) { return interfaceId == this.InterfaceId; }

                protected override string InterfaceName { get { return "GPSTracker.GrainInterface.IPushNotifierGrain"; } }

                protected override string GetMethodName(int interfaceId, int methodId) { return PushNotifierGrainMethodInvoker.GetMethodName(interfaceId, methodId); }
            
            protected internal PushNotifierGrainReference(GrainReference reference) : 
                    base(reference)
            {
            }
            
            [Orleans.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                PushNotifierGrainReference input = ((PushNotifierGrainReference)(original));
                return ((PushNotifierGrainReference)(GrainReference.CopyGrainReference(input)));
            }
            
            [Orleans.SerializerMethodAttribute()]
            public static void _Serializer(object original, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                PushNotifierGrainReference input = ((PushNotifierGrainReference)(original));
                GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [Orleans.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return PushNotifierGrainReference.Cast(((Orleans.GrainReference)(GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public System.Threading.Tasks.Task SendMessage(GPSTracker.Common.DeviceStatusMessage message)
            {

                return base.InvokeMethodAsync<object>(-1204653416, new object[] {message}, TimeSpan.Zero , options:  InvokeMethodOptions.Unordered);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [Orleans.MethodInvokerAttribute("GPSTracker.GrainInterface.IPushNotifierGrain", -2137827649)]
    internal class PushNotifierGrainMethodInvoker : IGrainMethodInvoker
    {
        
        public int InterfaceId
        {
            get
            {
                return -2137827649;
            }
        }
        
        public async System.Threading.Tasks.Task<Object> Invoke(IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {
                if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case -2137827649:  // IPushNotifierGrain
                        switch (methodId)
                        {
                            case -1204653416: 
                                await ((IPushNotifierGrain)grain).SendMessage((GPSTracker.Common.DeviceStatusMessage)arguments[0]);
                              return true;
                            default: 
                                throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case -2137827649:  // IPushNotifierGrain
                    switch (methodId)
                    {
                        case -1204653416:
                            return "SendMessage";
                    case -606142484:
                            return "GetProperties";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [Serializable()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PushNotifierGrainProperties
    {
        

            public Dictionary<string,object> AsDictionary()
            {  
                var retValue = new Dictionary<string,object>();
                return retValue;
            }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class DeviceGrainFactory
    {
        

                        public static IDeviceGrain GetGrain(long primaryKey)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IDeviceGrain), -239237304, primaryKey));
                        }

                        public static IDeviceGrain GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IDeviceGrain), -239237304, primaryKey, grainClassNamePrefix));
                        }

                        public static IDeviceGrain GetGrain(Guid primaryKey)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IDeviceGrain), -239237304, primaryKey));
                        }

                        public static IDeviceGrain GetGrain(Guid primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IDeviceGrain), -239237304, primaryKey, grainClassNamePrefix));
                        }

            public static IDeviceGrain Cast(IAddressable grainRef)
            {
                
                return DeviceGrainReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [Orleans.GrainReferenceAttribute("GPSTracker.GrainInterface.IDeviceGrain")]
        internal class DeviceGrainReference : Orleans.GrainReference, IDeviceGrain, Orleans.IAddressable
        {
            

            public static IDeviceGrain Cast(IAddressable grainRef)
            {
                
                return (IDeviceGrain) GrainReference.CastInternal(typeof(IDeviceGrain), (GrainReference gr) => { return new DeviceGrainReference(gr);}, grainRef, -239237304);
            }

                protected override int InterfaceId { get { return -239237304; } }

                public override bool IsCompatible(int interfaceId) { return interfaceId == this.InterfaceId; }

                protected override string InterfaceName { get { return "GPSTracker.GrainInterface.IDeviceGrain"; } }

                protected override string GetMethodName(int interfaceId, int methodId) { return DeviceGrainMethodInvoker.GetMethodName(interfaceId, methodId); }

            public async System.Threading.Tasks.Task<DeviceGrainProperties> GetProperties() 
            { 
                return await base.InvokeMethodAsync<DeviceGrainProperties>( -606142484, new object[]{}, TimeSpan.Zero);
            }
            
            
            protected internal DeviceGrainReference(GrainReference reference) : 
                    base(reference)
            {
            }
            
            public System.Threading.Tasks.Task<GPSTracker.Common.DeviceMessage> LastMessage
            {
                get
                {

                return base.InvokeMethodAsync<GPSTracker.Common.DeviceMessage>(1410995719, new object[] {}, TimeSpan.Zero , options: InvokeMethodOptions.ReadOnly);
                }
            }
            
            public System.Threading.Tasks.Task<string> Description
            {
                get
                {

                return base.InvokeMethodAsync<System.String>(459335896, new object[] {}, TimeSpan.Zero , options: InvokeMethodOptions.ReadOnly);
                }
            }
            
            [Orleans.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                DeviceGrainReference input = ((DeviceGrainReference)(original));
                return ((DeviceGrainReference)(GrainReference.CopyGrainReference(input)));
            }
            
            [Orleans.SerializerMethodAttribute()]
            public static void _Serializer(object original, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                DeviceGrainReference input = ((DeviceGrainReference)(original));
                GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [Orleans.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return DeviceGrainReference.Cast(((Orleans.GrainReference)(GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public System.Threading.Tasks.Task ProcessMessage(GPSTracker.Common.DeviceMessage message)
            {

                return base.InvokeMethodAsync<object>(842001816, new object[] {message}, TimeSpan.Zero );
            }
            
            public System.Threading.Tasks.Task Register(GPSTracker.Common.Device device)
            {

                return base.InvokeMethodAsync<object>(-810992690, new object[] {device}, TimeSpan.Zero );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [Orleans.MethodInvokerAttribute("GPSTracker.GrainInterface.IDeviceGrain", -239237304)]
    internal class DeviceGrainMethodInvoker : IGrainMethodInvoker
    {
        
        public int InterfaceId
        {
            get
            {
                return -239237304;
            }
        }
        
        public async System.Threading.Tasks.Task<Object> Invoke(IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {
                if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case -239237304:  // IDeviceGrain
                        switch (methodId)
                        {
                            case 1410995719: 
                                return await ((IDeviceGrain)grain).LastMessage;
                            case 459335896: 
                                return await ((IDeviceGrain)grain).Description;
                            case 842001816: 
                                await ((IDeviceGrain)grain).ProcessMessage((GPSTracker.Common.DeviceMessage)arguments[0]);
                              return true;
                            case -810992690: 
                                await ((IDeviceGrain)grain).Register((GPSTracker.Common.Device)arguments[0]);
                              return true;
                            case -606142484: return ((IDeviceGrain)grain).GetProperties();
                                                        default: 
                                throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case -239237304:  // IDeviceGrain
                    switch (methodId)
                    {
                        case 1410995719:
                            return "get_LastMessage";
                    case 459335896:
                            return "get_Description";
                    case 842001816:
                            return "ProcessMessage";
                    case -810992690:
                            return "Register";
                    case -606142484:
                            return "GetProperties";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [System.SerializableAttribute()]
    public static class DeviceGrainExtensionMethods
    {
        
static public System.Threading.Tasks.Task<DeviceGrainProperties> GetProperties(this IDeviceGrain interfaceData) 
            { 
                DeviceGrainFactory.DeviceGrainReference gref = interfaceData as DeviceGrainFactory.DeviceGrainReference;
                 return gref.GetProperties();
            }
            
    }
    
    [Serializable()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class DeviceGrainProperties
    {
        

            public DeviceMessage LastMessage { get; set; }
            public String Description { get; set; }
            public Dictionary<string,object> AsDictionary()
            {  
                var retValue = new Dictionary<string,object>();
                retValue["LastMessage"] = LastMessage;
                retValue["Description"] = Description;
                return retValue;
            }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GPSTracker.GrainInterfaceSerializers
{
    using System;
    using System.Collections.Generic;
    using System.Reflection;
    using Orleans.Serialization;
    using GPSTracker.Common;
    using System.Collections;
    using System.Runtime.Serialization;
    using System.Runtime.InteropServices;
    
    
    [Orleans.RegisterSerializerAttribute()]
    internal class GPSTracker_Common_DeviceStatusMessageSerialization
    {
        
        static GPSTracker_Common_DeviceStatusMessageSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            GPSTracker.Common.DeviceStatusMessage input = ((GPSTracker.Common.DeviceStatusMessage)(original));
            GPSTracker.Common.DeviceStatusMessage result = new GPSTracker.Common.DeviceStatusMessage();
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            result.Description = input.Description;
            result.DeviceId = ((Guid)(Orleans.Serialization.SerializationManager.DeepCopyInner(input.DeviceId)));
            result.Latitude = input.Latitude;
            result.Longitude = input.Longitude;
            result.MessageId = input.MessageId;
            result.Timestamp = input.Timestamp;
            result.Velocity = input.Velocity;
            return result;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            GPSTracker.Common.DeviceStatusMessage input = ((GPSTracker.Common.DeviceStatusMessage)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Description, stream, typeof(String));
            Orleans.Serialization.SerializationManager.SerializeInner(input.DeviceId, stream, typeof(Guid));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Latitude, stream, typeof(Double));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Longitude, stream, typeof(Double));
            Orleans.Serialization.SerializationManager.SerializeInner(input.MessageId, stream, typeof(Int32));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Timestamp, stream, typeof(DateTime));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Velocity, stream, typeof(Double));
        }
        
        public static object Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            GPSTracker.Common.DeviceStatusMessage result = new GPSTracker.Common.DeviceStatusMessage();
            result.Description = ((String)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(String), stream)));
            result.DeviceId = ((Guid)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Guid), stream)));
            result.Latitude = ((Double)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Double), stream)));
            result.Longitude = ((Double)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Double), stream)));
            result.MessageId = ((Int32)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Int32), stream)));
            result.Timestamp = ((DateTime)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(DateTime), stream)));
            result.Velocity = ((Double)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Double), stream)));
            return result;
        }
        
        public static void Register()
        {
            Orleans.Serialization.SerializationManager.Register(typeof(GPSTracker.Common.DeviceStatusMessage), DeepCopier, Serializer, Deserializer);
        }
    }
    
    [Orleans.RegisterSerializerAttribute()]
    internal class GPSTracker_Common_DeviceMessageSerialization
    {
        
        static GPSTracker_Common_DeviceMessageSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            GPSTracker.Common.DeviceMessage input = ((GPSTracker.Common.DeviceMessage)(original));
            GPSTracker.Common.DeviceMessage result = new GPSTracker.Common.DeviceMessage();
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            result.DeviceId = ((Guid)(Orleans.Serialization.SerializationManager.DeepCopyInner(input.DeviceId)));
            result.Latitude = input.Latitude;
            result.Longitude = input.Longitude;
            result.MessageId = input.MessageId;
            result.Timestamp = input.Timestamp;
            return result;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            GPSTracker.Common.DeviceMessage input = ((GPSTracker.Common.DeviceMessage)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.DeviceId, stream, typeof(Guid));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Latitude, stream, typeof(Double));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Longitude, stream, typeof(Double));
            Orleans.Serialization.SerializationManager.SerializeInner(input.MessageId, stream, typeof(Int32));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Timestamp, stream, typeof(DateTime));
        }
        
        public static object Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            GPSTracker.Common.DeviceMessage result = new GPSTracker.Common.DeviceMessage();
            result.DeviceId = ((Guid)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Guid), stream)));
            result.Latitude = ((Double)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Double), stream)));
            result.Longitude = ((Double)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Double), stream)));
            result.MessageId = ((Int32)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Int32), stream)));
            result.Timestamp = ((DateTime)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(DateTime), stream)));
            return result;
        }
        
        public static void Register()
        {
            Orleans.Serialization.SerializationManager.Register(typeof(GPSTracker.Common.DeviceMessage), DeepCopier, Serializer, Deserializer);
        }
    }
    
    [Orleans.RegisterSerializerAttribute()]
    internal class GPSTracker_Common_DeviceSerialization
    {
        
        static GPSTracker_Common_DeviceSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            GPSTracker.Common.Device input = ((GPSTracker.Common.Device)(original));
            GPSTracker.Common.Device result = new GPSTracker.Common.Device();
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            result.Description = input.Description;
            result.DeviceId = ((Guid)(Orleans.Serialization.SerializationManager.DeepCopyInner(input.DeviceId)));
            result.Direction = input.Direction;
            result.Lat = input.Lat;
            result.Lon = input.Lon;
            result.Speed = input.Speed;
            return result;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            GPSTracker.Common.Device input = ((GPSTracker.Common.Device)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Description, stream, typeof(String));
            Orleans.Serialization.SerializationManager.SerializeInner(input.DeviceId, stream, typeof(Guid));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Direction, stream, typeof(Double));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Lat, stream, typeof(Double));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Lon, stream, typeof(Double));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Speed, stream, typeof(Double));
        }
        
        public static object Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            GPSTracker.Common.Device result = new GPSTracker.Common.Device();
            result.Description = ((String)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(String), stream)));
            result.DeviceId = ((Guid)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Guid), stream)));
            result.Direction = ((Double)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Double), stream)));
            result.Lat = ((Double)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Double), stream)));
            result.Lon = ((Double)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Double), stream)));
            result.Speed = ((Double)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Double), stream)));
            return result;
        }
        
        public static void Register()
        {
            Orleans.Serialization.SerializationManager.Register(typeof(GPSTracker.Common.Device), DeepCopier, Serializer, Deserializer);
        }
    }
}
#pragma warning restore 162
#pragma warning restore 219
#pragma warning restore 693
#pragma warning restore 1591
#pragma warning restore 1998
#endif
